{"version":3,"sources":["store/reducer/index.js","components/Header.js","components/Search.js","components/Movie.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["initialState","loading","movies","erroMessage","reducer","state","action","type","errorMessage","payload","error","useStyles","makeStyles","header","background","Header","props","classes","className","onClick","refresh","text","Search","useState","searchValue","setSearchValue","value","onChange","e","target","Button","variant","color","preventDefault","search","Movie","movie","poster","Poster","Title","height","width","alt","src","Year","Footer","grid","card","boxShadow","padding","container","minHeight","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","getMovies","map","index","Card","key","title","window","location","reload","Response","Error","Container","maxWidth","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bff31583.chunk.js","sourcesContent":["export const initialState = {\r\n    loading: true,\r\n    movies: [],\r\n    erroMessage: null\r\n}\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"SEARCH_MOVIES_REQUEST\":\r\n          return {\r\n            ...state,\r\n            loading: true,\r\n            errorMessage: null\r\n          };\r\n        case \"SEARCH_MOVIES_SUCCESS\":\r\n          return {\r\n            ...state,\r\n            loading: false,\r\n            movies: action.payload\r\n          };\r\n        case \"SEARCH_MOVIES_FAILURE\":\r\n          return {\r\n            ...state,\r\n            loading: false,\r\n            errorMessage: action.error\r\n          };\r\n        default:\r\n          return state;\r\n      }\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    header : {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\r\n    }\r\n})\r\n\r\nconst Header = props => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <header className={`App-header ${classes.header}`}>\r\n            <h2 onClick={props.refresh}>{props.text}</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Search = props => {\r\n\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n    const handleSearchInputChanges = e => {\r\n        setSearchValue(e.target.value)\r\n    }\r\n\r\n    const resetInputField = () => {\r\n        setSearchValue(\"\")\r\n    }\r\n\r\n    const callSearchFunction = e => {\r\n        e.preventDefault()\r\n        props.search(searchValue)\r\n        resetInputField()\r\n    }\r\n\r\n    return (\r\n        <form className=\"search\">\r\n            <input\r\n            value={searchValue}\r\n            onChange={handleSearchInputChanges}\r\n            type=\"text\"\r\n            />\r\n            <Button \r\n                variant=\"contained\" \r\n                color=\"primary\" \r\n                onClick={callSearchFunction} \r\n                type=\"submit\" \r\n                value=\"SEARCH\"\r\n            >SEARCH</Button>\r\n       </form>\r\n    )\r\n\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\r\n\r\nconst Movie = ({ movie }) => {\r\n    \r\n    const poster = movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n    return (\r\n        <div className=\"movie\">\r\n            <h2>{movie.Title}</h2>\r\n            <div>\r\n                <img\r\n                    height=\"300\"\r\n                    width=\"200\"\r\n                    alt={`The movie titled: ${movie.Title}`}\r\n                    src={poster}\r\n                />\r\n            </div>\r\n            <p>{movie.Year}</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport '../App.css'\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <footer className=\"footer\">\r\n            <span>Copyright 2019 Jack Liang</span>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useEffect, useReducer } from 'react';\r\nimport { initialState, reducer } from '../store/reducer/index';\r\n\r\nimport { Container, Card } from '@material-ui/core';\r\nimport '../App.css';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Header from './Header';\r\nimport Search from './Search';\r\nimport Movie from './Movie';\r\nimport Footer from './Footer';\r\n\r\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=89a1bd51\";\r\n\r\nconst useStyles = makeStyles( grid => ({\r\n  card: {\r\n    boxShadow: 'none'\r\n  },\r\n  grid: {\r\n    padding: '1.75%'\r\n  },\r\n  text: {\r\n    color: '#666'\r\n  },\r\n  container: {\r\n    minHeight: `calc(100vh - 259px)`\r\n  }\r\n}))\r\n\r\nconst App = () => {\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  const classes = useStyles()\r\n\r\n  useEffect(() => {\r\n    fetch(MOVIE_API_URL)\r\n      .then( response =>ã€€response.json())\r\n      .then( jsonResponse => {\r\n        dispatch({\r\n          type: 'SEARCH_MOVIES_SUCCESS',\r\n          payload: jsonResponse.Search\r\n        })\r\n      })\r\n  }, [])\r\n\r\n  const search = searchValue => {\r\n    dispatch({\r\n      type: \"SEARCH_MOVIES_REQUEST\"\r\n    });\r\n\r\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=89a1bd51`)\r\n      .then(response => response.json())\r\n      .then(jsonResponse => {\r\n        if (jsonResponse.Response === \"True\") {\r\n          dispatch({\r\n            type: 'SEARCH_MOVIES_SUCCESS',\r\n            payload: jsonResponse.Search\r\n          })\r\n        } else {\r\n          dispatch({\r\n            type: \"SEARCH_MOVIES_FAILURE\",\r\n            error: jsonResponse.Error\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  const refreshPage = () => {\r\n    window.location.reload()\r\n  }\r\n\r\n  const { movies, errorMessage, loading } = state;\r\n\r\n  const getMovies = \r\n  loading && !errorMessage ? (\r\n    <span>loading...</span>) : errorMessage ? (\r\n      <div className=\"errorMessage\">{errorMessage}</div>\r\n    ) : (\r\n      movies.map((movie, index) => (\r\n        <Card className={`${classes.card} ${classes.grid}`} key={`${index}-${movie.title}`} >\r\n          <Movie movie={movie} />\r\n        </Card>\r\n      )\r\n      )\r\n    )  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header text=\"MOVIES SEARCH\" refresh={refreshPage} />\r\n      <Search search={search} />\r\n      <p className={`App-intro, ${classes.text}`}>Sharing a few of our favourite movies</p>\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <div className=\"movies\">\r\n          {getMovies}\r\n        </div>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}